<?xml version="1.0"?>
<modernizer>

<!--
This file contains the standard set of violations for Modernizer.  The
violation names use the same format that javap emits.
-->
  <violation>
    <name>com/google/common/base/Function</name>
    <version>1.8</version>
    <comment>Prefer java.util.function.Function</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Predicate</name>
    <version>1.8</version>
    <comment>Prefer java.util.function.Predicate</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Supplier</name>
    <version>1.8</version>
    <comment>Prefer java.util.function.Supplier</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Charsets.ISO_8859_1:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Charsets.US_ASCII:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Charsets.UTF_8:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Charsets.UTF_16BE:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Charsets.UTF_16LE:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Charsets.UTF_16:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Objects.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z</name>
    <version>1.7</version>
    <comment>Prefer java.util.Objects.equals(Object, Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Objects.hashCode:([Ljava/lang/Object;)I</name>
    <version>1.7</version>
    <comment>Prefer java.util.Objects.hash(Object...)</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Optional.absent:()Lcom/google/common/base/Optional;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Optional</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Optional.of:(Ljava/lang/Object;)Lcom/google/common/base/Optional;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Optional</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Optional.fromNullable:(Ljava/lang/Object;)Lcom/google/common/base/Optional;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Optional</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableList.of:()Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object, Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object, Object, Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object, Object, Object, Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object[])</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.9</version>
    <comment>Prefer java.util.List.of(Object[])</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableMap.of:()Lcom/google/common/collect/ImmutableMap;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Map.of()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableMap.of:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Map.of(Object, Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableMap.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Map.of(Object, Object, Object, Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableMap.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Map.of(Object, Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableMap.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Map.of(Object, Object, Object, Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableMap.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Map.of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableSet.of:()Lcom/google/common/collect/ImmutableSet;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Set.of()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Set.of(Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Set.of(Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Set.of(Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Set.of(Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Set.of(Object, Object, Object, Object, Object)</comment>
  </violation>

  <violation>
      <name>com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Set.of(Object[])</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Lists.newArrayList:()Ljava/util/ArrayList;</name>
    <version>1.7</version>
    <comment>Prefer java.util.ArrayList&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Lists.newArrayListWithCapacity:(I)Ljava/util/ArrayList;</name>
    <version>1.7</version>
    <comment>Prefer java.util.ArrayList&lt;&gt;(int)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Lists.newCopyOnWriteArrayList:()Ljava/util/concurrent/CopyOnWriteArrayList;</name>
    <version>1.7</version>
    <comment>Prefer java.util.concurrent.CopyOnWriteArrayList&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Lists.newLinkedList:()Ljava/util/LinkedList;</name>
    <version>1.7</version>
    <comment>Prefer java.util.LinkedList&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newConcurrentMap:()Ljava/util/concurrent/ConcurrentMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.concurrent.ConcurrentHashMap&lt;&gt;() or customize the map using com.google.common.collect.MapMaker</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newEnumMap:(Ljava/lang/Class;)Ljava/util/EnumMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.EnumMap&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newEnumMap:(Ljava/util/Map;)Ljava/util/EnumMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.EnumMap&lt;&gt;(java.util.Map)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.HashMap&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newHashMap:(Ljava/util/Map;)Ljava/util/HashMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.HashMap&lt;&gt;(java.util.Map)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newIdentityHashMap:()Ljava/util/IdentityHashMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.IdentityHashMap&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newLinkedHashMap:()Ljava/util/LinkedHashMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.LinkedHashMap&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newLinkedHashMap:(Ljava/util/Map;)Ljava/util/LinkedHashMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.LinkedHashMap&lt;&gt;(java.util.Map)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newTreeMap:()Ljava/util/TreeMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.TreeMap&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newTreeMap:(Ljava/util/Comparator;)Ljava/util/TreeMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.TreeMap&lt;&gt;(java.util.Comparator)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.newTreeMap:(Ljava/util/SortedMap;)Ljava/util/TreeMap;</name>
    <version>1.7</version>
    <comment>Prefer java.util.TreeMap&lt;&gt;(java.util.SortedMap)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.unmodifiableNavigableMap:(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Collections.unmodifiableNavigableMap&lt;&gt;(java.util.NavigableMap)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Maps.synchronizedNavigableMap:(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Collections.synchronizedNavigableMap&lt;&gt;(java.util.NavigableMap)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Sets.newCopyOnWriteArraySet:()Ljava/util/concurrent/CopyOnWriteArraySet;</name>
    <version>1.7</version>
    <comment>Prefer java.util.concurrent.CopyOnWriteArraySet&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;</name>
    <version>1.7</version>
    <comment>Prefer java.util.HashSet&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Sets.newLinkedHashSet:()Ljava/util/LinkedHashSet;</name>
    <version>1.7</version>
    <comment>Prefer java.util.LinkedHashSet&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Sets.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;</name>
    <version>1.7</version>
    <comment>Prefer java.util.Collections.newSetFromMap&lt;&gt;(java.util.Map)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Sets.newTreeSet:()Ljava/util/TreeSet;</name>
    <version>1.7</version>
    <comment>Prefer java.util.TreeSet&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Sets.newTreeSet:(Ljava/util/Comparator;)Ljava/util/TreeSet;</name>
    <version>1.7</version>
    <comment>Prefer java.util.TreeSet&lt;&gt;(java.util.Comparator)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Sets.unmodifiableNavigableSet:(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Collections.unmodifiableNavigableSet&lt;&gt;(java.util.NavigableSet)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Sets.synchronizedNavigableSet:(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Collections.synchronizedNavigableSet&lt;&gt;(java.util.NavigableSet)</comment>
  </violation>

  <violation>
    <name>com/google/common/io/BaseEncoding.base64:()Lcom/google/common/io/BaseEncoding;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Base64.Decoder or java.util.Base64.Encoder</comment>
  </violation>

  <violation>
    <name>com/google/common/io/ByteStreams.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J</name>
    <version>1.9</version>
    <comment>Prefer java.io.InputStream.transferTo</comment>
  </violation>

  <violation>
    <name>com/google/common/io/Files.toByteArray:(Ljava/io/File;)[B</name>
    <version>1.7</version>
    <comment>Prefer java.nio.file.Files.readAllBytes(java.nio.file.Path)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/Chars.compare:(CC)I</name>
    <version>1.7</version>
    <comment>Prefer java.lang.Char.compare(char, char)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/Ints.compare:(II)I</name>
    <version>1.7</version>
    <comment>Prefer java.lang.Integer.compare(int, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/Longs.compare:(JJ)I</name>
    <version>1.7</version>
    <comment>Prefer java.lang.Long.compare(long, long)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/Shorts.compare:(SS)I</name>
    <version>1.7</version>
    <comment>Prefer java.lang.Short.compare(short, short)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedInts.compare:(II)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Integer.compareUnsigned(int, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedInts.divide:(II)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Integer.divideUnsigned(int, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedInts.parseUnsignedInt:(Ljava/lang/String;)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Integer.parseUnsignedInt(String)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedInts.parseUnsignedInt:(Ljava/lang/String;I)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Integer.parseUnsignedInt(String, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedInts.remainder:(II)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Integer.remainderUnsigned(int, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedLongs.compare:(JJ)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Long.compareUnsigned(long, long)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedLongs.divide:(JJ)J</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Long.divideUnsigned(long, long)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedLongs.parseUnsignedLong:(Ljava/lang/String;)J</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Long.parseUnsignedLong(String)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedLongs.parseUnsignedLong:(Ljava/lang/String;I)J</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Long.parseUnsignedLong(String, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/UnsignedLongs.remainder:(JJ)J</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Long.remainderUnsigned(long, long)</comment>
  </violation>

  <violation>
    <name>com/google/common/primitives/Ints.checkedCast:(J)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Math.toIntExact(long); note that it throws an ArithmeticException instead of an IllegalArgumentException</comment>
  </violation>

  <violation>
    <name>com/google/common/math/IntMath.checkedAdd:(II)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Math.addExact(int, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/math/IntMath.checkedSubtract:(II)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Math.subtractExact(int, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/math/IntMath.checkedMultiply:(II)I</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Math.multiplyExact(int, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/math/LongMath.checkedAdd:(JJ)J</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Math.addExact(long, long)</comment>
  </violation>

  <violation>
    <name>com/google/common/math/LongMath.checkedSubtract:(JJ)J</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Math.subtractExact(long, long)</comment>
  </violation>

  <violation>
    <name>com/google/common/math/LongMath.checkedMultiply:(JJ)J</name>
    <version>1.8</version>
    <comment>Prefer java.lang.Math.multiplyExact(long, long)</comment>
  </violation>

  <violation>
    <name>com/google/common/util/concurrent/Atomics.newReference:()Ljava/util/concurrent/atomic/AtomicReference;</name>
    <version>1.7</version>
    <comment>Prefer java.util.concurrent.atomic.AtomicReference&lt;&gt;()</comment>
  </violation>

  <violation>
    <name>com/google/common/util/concurrent/Atomics.newReference:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicReference;</name>
    <version>1.7</version>
    <comment>Prefer java.util.concurrent.atomic.AtomicReference&lt;&gt;(Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/util/concurrent/Atomics.newReferenceArray:(I)Ljava/util/concurrent/atomic/AtomicReferenceArray;</name>
    <version>1.7</version>
    <comment>Prefer java.util.concurrent.atomic.AtomicReferenceArray&lt;&gt;(int)</comment>
  </violation>

  <violation>
    <name>com/google/common/util/concurrent/Atomics.newReferenceArray:([Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicReferenceArray;</name>
    <version>1.7</version>
    <comment>Prefer java.util.concurrent.atomic.AtomicReferenceArray&lt;&gt;(Object[])</comment>
  </violation>

  <violation>
    <name>java/io/InputStreamReader."&lt;init&gt;":(Ljava/io/InputStream;Ljava/lang/String;)V</name>
    <version>1.4</version>
    <comment>Prefer java.io.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)</comment>
  </violation>

  <violation>
    <name>java/io/OutputStreamWriter."&lt;init&gt;":(Ljava/io/OutputStream;Ljava/lang/String;)V</name>
    <version>1.4</version>
    <comment>Prefer java.io.OutputStreamWriter(java.io.OutputStream, java.nio.charset.Charset)</comment>
  </violation>

  <violation>
    <name>java/lang/Byte."&lt;init&gt;":(B)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.Byte.valueOf(byte)</comment>
  </violation>

  <violation>
    <name>java/lang/Character."&lt;init&gt;":(C)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.Character.valueOf(char)</comment>
  </violation>

  <violation>
    <name>java/lang/Double."&lt;init&gt;":(D)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.Double.valueOf(double)</comment>
  </violation>

  <violation>
    <name>java/lang/Float."&lt;init&gt;":(D)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.Float.valueOf(double)</comment>
  </violation>

  <violation>
    <name>java/lang/Float."&lt;init&gt;":(F)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.Float.valueOf(float)</comment>
  </violation>

  <violation>
    <name>java/lang/Integer."&lt;init&gt;":(I)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.Integer.valueOf(int)</comment>
  </violation>

  <violation>
    <name>java/lang/Long."&lt;init&gt;":(J)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.Long.valueOf(long)</comment>
  </violation>

  <violation>
    <name>java/lang/Short."&lt;init&gt;":(S)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.Short.valueOf(short)</comment>
  </violation>

  <violation>
    <name>java/lang/String.getBytes:(Ljava/lang/String;)[B</name>
    <version>1.6</version>
    <comment>Prefer java.lang.String.getBytes(java.nio.charset.Charset)</comment>
  </violation>

  <violation>
    <name>java/lang/String."&lt;init&gt;":([BIILjava/lang/String;)V</name>
    <version>1.6</version>
    <comment>Prefer java.lang.String.&lt;init&gt;(byte[], int, int, java.nio.charset.Charset)</comment>
  </violation>

  <violation>
    <name>java/lang/String."&lt;init&gt;":([BLjava/lang/String;)V</name>
    <version>1.6</version>
    <comment>Prefer java.lang.String.&lt;init&gt;(byte[], java.nio.charset.Charset)</comment>
  </violation>

  <violation>
    <name>java/lang/StringBuffer."&lt;init&gt;":()V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.StringBuilder</comment>
  </violation>

  <violation>
    <name>java/lang/StringBuffer."&lt;init&gt;":(I)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.StringBuilder</comment>
  </violation>

  <violation>
    <name>java/lang/StringBuffer."&lt;init&gt;":(Ljava/lang/String;)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.StringBuilder</comment>
  </violation>

  <violation>
    <name>java/lang/StringBuffer."&lt;init&gt;":(Ljava/lang/CharSequence;)V</name>
    <version>1.5</version>
    <comment>Prefer java.lang.StringBuilder</comment>
  </violation>

  <violation>
    <name>java/net/HttpURLConnection.setFixedLengthStreamingMode:(I)V</name>
    <version>1.7</version>
    <comment>Prefer java.net.HttpURLConnection.setFixedLengthStreamingMode(long)</comment>
  </violation>

  <violation>
    <name>java/util/Collections.EMPTY_LIST:Ljava/util/List;</name>
    <version>1.5</version>
    <comment>Prefer java.util.Collections.emptyList()</comment>
  </violation>

  <violation>
    <name>java/util/Collections.EMPTY_MAP:Ljava/util/Map;</name>
    <version>1.5</version>
    <comment>Prefer java.util.Collections.emptyMap()</comment>
  </violation>

  <violation>
    <name>java/util/Collections.EMPTY_SET:Ljava/util/Set;</name>
    <version>1.5</version>
    <comment>Prefer java.util.Collections.emptySet()</comment>
  </violation>

  <violation>
    <name>java/util/Hashtable."&lt;init&gt;":(IF)V</name>
    <version>1.2</version>
    <comment>Prefer java.util.HashMap</comment>
  </violation>

  <violation>
    <name>java/util/Hashtable."&lt;init&gt;":(I)V</name>
    <version>1.2</version>
    <comment>Prefer java.util.HashMap</comment>
  </violation>

  <violation>
    <name>java/util/Hashtable."&lt;init&gt;":()V</name>
    <version>1.2</version>
    <comment>Prefer java.util.HashMap</comment>
  </violation>

  <violation>
    <name>java/util/Hashtable."&lt;init&gt;":(Ljava/util/Map;)V</name>
    <version>1.2</version>
    <comment>Prefer java.util.HashMap</comment>
  </violation>

  <violation>
    <name>java/util/Vector."&lt;init&gt;":()V</name>
    <version>1.2</version>
    <comment>Prefer java.util.ArrayList</comment>
  </violation>

  <violation>
    <name>java/util/Vector."&lt;init&gt;":(I)V</name>
    <version>1.2</version>
    <comment>Prefer java.util.ArrayList</comment>
  </violation>

  <violation>
    <name>java/util/Vector."&lt;init&gt;":(II)V</name>
    <version>1.2</version>
    <comment>Prefer java.util.ArrayList</comment>
  </violation>

  <violation>
    <name>java/util/Vector."&lt;init&gt;":(Ljava/util/Collection;)V</name>
    <version>1.2</version>
    <comment>Prefer java.util.ArrayList</comment>
  </violation>

  <violation>
    <name>org/apache/commons/codec/binary/Base64.decodeBase64:(Ljava/lang/String;)[B</name>
    <version>1.8</version>
    <comment>Prefer java.util.Base64.Decoder.decode(String)</comment>
  </violation>

  <violation>
    <name>org/apache/commons/codec/binary/Base64.encodeBase64String:([B)Ljava/lang/String;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Base64.Encoder.encodeToString(byte[])</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/Charsets.ISO_8859_1:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/Charsets.US_ASCII:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/Charsets.UTF_8:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/Charsets.UTF_16BE:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/Charsets.UTF_16LE:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/Charsets.UTF_16:Ljava/nio/charset/Charset;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.charset.StandardCharsets</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/FileUtils.readFileToByteArray:(Ljava/io/File;)[B</name>
    <version>1.7</version>
    <comment>Prefer java.nio.file.Files.readAllBytes(java.nio.file.Path)</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/FileUtils.readLines:(Ljava/io/File;)Ljava/util/List;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/FileUtils.readLines:(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/util/List;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)</comment>
  </violation>

  <violation>
    <name>org/apache/commons/io/FileUtils.readLines:(Ljava/io/File;Ljava/lang/String;)Ljava/util/List;</name>
    <version>1.7</version>
    <comment>Prefer java.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)</comment>
  </violation>

  <violation>
    <name>sun/misc/BASE64Decoder.decodeBuffer:(Ljava/lang/String;)[B</name>
    <version>1.8</version>
    <comment>Prefer java.util.Base64.Decoder.decode(String)</comment>
  </violation>

  <violation>
    <name>sun/misc/BASE64Encoder.encode:([B)Ljava/lang/String;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Base64.Encoder.encodeToString(byte[])</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;</name>
    <version>1.7</version>
    <comment>Prefer java.util.Objects.requireNonNull(Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer java.util.Objects.requireNonNull(Object, String) or java.util.Objects.requireNonNull(Object, Supplier&lt;String&gt;)</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Preconditions.checkElementIndex:(II)I</name>
    <version>1.9</version>
    <comment>Prefer java.util.Objects.checkIndex(int, int)</comment>
  </violation>

  <violation>
    <name>com/google/common/base/Preconditions.checkPositionIndexes:(III)V</name>
    <version>1.9</version>
    <comment>Prefer java.util.Objects.checkFromToIndex(int, int, int)</comment>
  </violation>

  <violation>
    <name>com/google/inject/Provider</name>
    <version>1.5</version>
    <comment>Prefer javax.inject.Provider</comment>
  </violation>

  <violation>
    <name>org/joda/time/DateTime.now:()Lorg/joda/time/DateTime;</name>
    <version>1.8</version>
    <comment>Prefer java.time.ZonedDateTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/DateTime.parse:(Ljava/lang/String;)Lorg/joda/time/DateTime;</name>
    <version>1.8</version>
    <comment>Prefer java.time.ZonedDateTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/DateTime."&lt;init&gt;":(J)V</name>
    <version>1.8</version>
    <comment>Prefer java.time.ZonedDateTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/Instant.now:()Lorg/joda/time/Instant;</name>
    <version>1.8</version>
    <comment>Prefer java.time.Instant</comment>
  </violation>

  <violation>
    <name>org/joda/time/Instant.parse:(Ljava/lang/String;)Lorg/joda/time/Instant;</name>
    <version>1.8</version>
    <comment>Prefer java.time.Instant</comment>
  </violation>

  <violation>
    <name>org/joda/time/Instant."&lt;init&gt;":(J)V</name>
    <version>1.8</version>
    <comment>Prefer java.time.Instant</comment>
  </violation>

  <violation>
    <name>org/joda/time/DateTimeZone.forID:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;</name>
    <version>1.8</version>
    <comment>Prefer java.time.ZoneId</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalDate.now:()Lorg/joda/time/LocalDate;</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalDate</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalDate.parse:(Ljava/lang/String;)Lorg/joda/time/LocalDate;</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalDate</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalDate."&lt;init&gt;":(J)V</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalDate</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalTime.now:()Lorg/joda/time/LocalTime;</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalTime.parse:(Ljava/lang/String;)Lorg/joda/time/LocalTime;</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalTime."&lt;init&gt;":(J)V</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalDateTime.now:()Lorg/joda/time/LocalDateTime;</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalDateTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalDateTime.parse:(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalDateTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/LocalDateTime."&lt;init&gt;":(J)V</name>
    <version>1.8</version>
    <comment>Prefer java.time.LocalDateTime</comment>
  </violation>

  <violation>
    <name>org/joda/time/Duration.millis:(J)Lorg/joda/time/Duration;</name>
    <version>1.8</version>
    <comment>Prefer java.time.Duration</comment>
  </violation>

  <violation>
    <name>org/joda/time/Duration."&lt;init&gt;":(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V</name>
    <version>1.8</version>
    <comment>Prefer java.time.Duration</comment>
  </violation>

  <violation>
    <name>org/joda/time/Period.parse:(Ljava/lang/String;)Lorg/joda/time/Period;</name>
    <version>1.8</version>
    <comment>Prefer java.time.Period</comment>
  </violation>

  <violation>
    <name>org/joda/time/Period."&lt;init&gt;":(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V</name>
    <version>1.8</version>
    <comment>Prefer java.time.Period</comment>
  </violation>

  <violation>
    <name>org/joda/time/format/DateTimeFormat.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;</name>
    <version>1.8</version>
    <comment>Prefer java.time.format.DateTimeFormatter</comment>
  </violation>

  <violation>
    <name>java/io/PrintStream."&lt;init&gt;":(Ljava/io/File;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.io.PrintStream(File, Charset)</comment>
  </violation>

  <violation>
    <name>java/io/PrintStream."&lt;init&gt;":(Ljava/lang/String;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.io.PrintStream(String, Charset)</comment>
  </violation>

  <violation>
    <name>java/io/PrintWriter."&lt;init&gt;":(Ljava/io/File;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.io.PrintWriter(File, Charset)</comment>
  </violation>

  <violation>
    <name>java/io/PrintWriter."&lt;init&gt;":(Ljava/lang/String;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.io.PrintWriter(String, Charset)</comment>
  </violation>

  <violation>
    <name>java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;</name>
    <version>1.10</version>
    <comment>Prefer java.io.ByteArrayOutputStream.toString(Charset)</comment>
  </violation>

  <violation>
    <name>java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</name>
    <version>1.10</version>
    <comment>Prefer java.net.URLDecoder.decode(String, Charset)</comment>
  </violation>

  <violation>
    <name>java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</name>
    <version>1.10</version>
    <comment>Prefer java.net.URLEncoder.encode(String, Charset)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableList.copyOf:(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableList;</name>
    <version>1.10</version>
    <comment>Prefer java.util.List.copyOf(Collection)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableMap.copyOf:(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;</name>
    <version>1.10</version>
    <comment>Prefer java.util.Map.copyOf(Map)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/ImmutableSet.copyOf:(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableSet;</name>
    <version>1.10</version>
    <comment>Prefer java.util.Set.copyOf(Collection)</comment>
  </violation>

  <violation>
    <name>java/util/Formatter."&lt;init&gt;":(Ljava/io/File;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Formatter(File, Charset)</comment>
  </violation>

  <violation>
    <name>java/util/Formatter."&lt;init&gt;":(Ljava/io/File;Ljava/lang/String;Ljava/util/Locale;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Formatter(File, Charset, Locale)</comment>
  </violation>

  <violation>
    <name>java/util/Formatter."&lt;init&gt;":(Ljava/io/OutputStream;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Formatter(OutputStream, Charset)</comment>
  </violation>

  <violation>
    <name>java/util/Formatter."&lt;init&gt;":(Ljava/io/OutputStream;Ljava/lang/String;Ljava/util/Locale;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Formatter(OutputStream, Charset, Locale)</comment>
  </violation>

  <violation>
    <name>java/util/Formatter."&lt;init&gt;":(Ljava/lang/String;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Formatter(String, Charset)</comment>
  </violation>

  <violation>
    <name>java/util/Formatter."&lt;init&gt;":(Ljava/lang/String;Ljava/lang/String;Ljava/util/Locale;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Formatter(String, Charset, Locale)</comment>
  </violation>

  <violation>
    <name>java/util/Scanner."&lt;init&gt;":(Ljava/io/File;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Scanner(File, Charset)</comment>
  </violation>

  <violation>
    <name>java/util/Scanner."&lt;init&gt;":(Ljava/io/InputStream;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Scanner(InputStream, Charset)</comment>
  </violation>

  <violation>
    <name>java/util/Scanner."&lt;init&gt;":(Ljava/nio/file/Path;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Scanner(Path, Charset)</comment>
  </violation>

  <violation>
    <name>java/util/Scanner."&lt;init&gt;":(Ljava/nio/channels/ReadableByteChannel;Ljava/lang/String;)V</name>
    <version>1.10</version>
    <comment>Prefer java.util.Scanner(ReadableByteChannel, Charset)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Streams.stream:(Ljava/util/Optional;)Ljava/util/stream/Stream;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Optional.stream()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Streams.stream:(Ljava/util/OptionalInt;)Ljava/util/stream/IntStream;</name>
    <version>1.9</version>
    <comment>Prefer java.util.OptionalInt.stream()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Streams.stream:(Ljava/util/OptionalLong;)Ljava/util/stream/LongStream;</name>
    <version>1.9</version>
    <comment>Prefer java.util.OptionalLong.stream()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Streams.stream:(Ljava/util/OptionalDouble;)Ljava/util/stream/DoubleStream;</name>
    <version>1.9</version>
    <comment>Prefer java.util.OptionalDouble.stream()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.getOnlyElement:(Ljava/lang/Iterable;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Stream.collect(MoreCollectors.onlyElement())</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.getOnlyElement:(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.frequency:(Ljava/lang/Iterable;Ljava/lang/Object;)I</name>
    <version>1.8</version>
    <comment>Prefer Stream.filter(element::equals).count() or Stream.filter(Predicate.isEqual(element)).count()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.cycle:(Ljava/lang/Iterable;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream.generate(() -> iterable).flatMap(Streams::stream)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.cycle:([Ljava/lang/Object;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream equivalent of this method is Stream.generate(() -> e) or Stream.generate(() -> collection).flatMap(Collection::stream)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.concat:(Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream.concat(a, b)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.concat:(Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Streams.concat(a, b, c)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.concat:(Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Streams.concat(a, b, c, d)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.concat:(Ljava/lang/Iterable;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Streams.concat(...)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.concat:([Ljava/lang/Iterable;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream.flatMap(s -> s)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.filter:(Ljava/lang/Iterable;Lcom/google/common/base/Predicate;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream.filter(java.util.function.Predicate&lt;? super T&gt;)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.filter:(Ljava/lang/Iterable;Ljava/lang/Class;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream.filter(type::isInstance).map(type::cast)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.any:(Ljava/lang/Iterable;Lcom/google/common/base/Predicate;)Z</name>
    <version>1.8</version>
    <comment>Prefer Stream.anyMatch(java.util.function.Predicate&lt;? super T&gt;)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.all:(Ljava/lang/Iterable;Lcom/google/common/base/Predicate;)Z</name>
    <version>1.8</version>
    <comment>Prefer Stream.allMatch(java.util.function.Predicate&lt;? super T&gt;)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.find:(Ljava/lang/Iterable;Lcom/google/common/base/Predicate;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Stream.filter(predicate).findFirst().get()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.find:(Ljava/lang/Iterable;Lcom/google/common/base/Predicate;Ljava/lang/Object;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Stream.filter(predicate).findFirst().orElse(defaultValue)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.tryFind:(Ljava/lang/Iterable;Lcom/google/common/base/Predicate;)Lcom/google/common/base/Optional;</name>
    <version>1.8</version>
    <comment>Prefer Stream.filter(predicate).findFirst()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.transform:(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream.map(java.util.function.Function&lt;? super T, ? extends R&gt;)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.get:(Ljava/lang/Iterable;I)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Stream.skip(position).findFirst().get()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.get:(Ljava/lang/Iterable;ILjava/lang/Object;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Stream.skip(position).findFirst().orElse(defaultValue)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.getFirst:(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Stream.findFirst().orElse(defaultValue)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.getLast:(Ljava/lang/Iterable;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Streams.findLast(stream).get()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.getLast:(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/lang/Object;</name>
    <version>1.8</version>
    <comment>Prefer Streams.findLast(stream).orElse(defaultValue)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.skip:(Ljava/lang/Iterable;I)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream.skip(long)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.limit:(Ljava/lang/Iterable;I)Ljava/lang/Iterable;</name>
    <version>1.8</version>
    <comment>Prefer Stream.limit(long)</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterables.isEmpty:(Ljava/lang/Iterable;)Z</name>
    <version>1.8</version>
    <comment>Prefer !stream.findAny().isPresent()</comment>
  </violation>

  <violation>
    <name>com/google/common/collect/Iterators.forEnumeration:(Ljava/util/Enumeration;)Lcom/google/common/collect/UnmodifiableIterator;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Enumeration.asIterator()</comment>
  </violation>

  <violation>
    <name>com/google/common/base/MoreObjects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</name>
    <version>1.9</version>
    <comment>Prefer java.util.Objects.requireNonNullElse(Object, Object)</comment>
  </violation>

  <violation>
    <name>com/google/common/io/ByteStreams.nullOutputStream:()Ljava/io/OutputStream;</name>
    <version>1.11</version>
    <comment>Prefer java.io.OutputStream.nullOutputStream()</comment>
  </violation>

  <violation>
    <name>com/google/common/io/ByteStreams.skipFully:(Ljava/io/InputStream;J)V</name>
    <version>1.12</version>
    <comment>Prefer java.io.InputStream.skipNBytes(long)</comment>
  </violation>

  <violation>
    <name>com/google/common/io/CharStreams.nullWriter:()Ljava/io/Writer;</name>
    <version>1.11</version>
    <comment>Prefer java.io.Writer.nullWriter()</comment>
  </violation>

  <violation>
    <name>com/google/common/io/Files.toString:(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/lang/String;</name>
    <version>1.11</version>
    <comment>Prefer java.nio.file.Files.readString(Path, Charset)</comment>
  </violation>

  <violation>
    <name>com/google/common/io/Files.write:(Ljava/lang/CharSequence;Ljava/io/File;Ljava/nio/charset/Charset;)V</name>
    <version>1.11</version>
    <comment>Prefer java.nio.file.Files.writeString(Path, CharSequence, Charset, OpenOption...)</comment>
  </violation>

  <violation>
    <name>java/io/FileReader."&lt;init&gt;":(Ljava/io/File;)V</name>
    <version>1.11</version>
    <comment>Prefer java.io.FileReader.&lt;init&gt;(File, Charset)</comment>
  </violation>

  <violation>
    <name>java/io/FileReader."&lt;init&gt;":(Ljava/lang/String;)V</name>
    <version>1.11</version>
    <comment>Prefer java.io.FileReader.&lt;init&gt;(String, Charset)</comment>
  </violation>

  <violation>
    <name>java/io/FileWriter."&lt;init&gt;":(Ljava/io/File;)V</name>
    <version>1.11</version>
    <comment>Prefer java.io.FileWriter.&lt;init&gt;(File, Charset)</comment>
  </violation>

  <violation>
    <name>java/io/FileWriter."&lt;init&gt;":(Ljava/io/File;Z)V</name>
    <version>1.11</version>
    <comment>Prefer java.io.FileWriter.&lt;init&gt;(File, Charset, boolean)</comment>
  </violation>

  <violation>
    <name>java/io/FileWriter."&lt;init&gt;":(Ljava/lang/String;)V</name>
    <version>1.11</version>
    <comment>Prefer java.io.FileWriter.&lt;init&gt;(String, Charset)</comment>
  </violation>

  <violation>
    <name>java/io/FileWriter."&lt;init&gt;":(Ljava/lang/String;Z)V</name>
    <version>1.11</version>
    <comment>Prefer java.io.FileWriter.&lt;init&gt;(String, Charset, boolean)</comment>
  </violation>

    <violation>
      <name>org/apache/commons/lang3/StringUtils.join:(Ljava/lang/Iterable;C)Ljava/lang/String;</name>
      <version>1.8</version>
      <comment>Prefer java.lang.String.join or use java.util.stream.Stream with java.util.stream.Collectors.joining</comment>
    </violation>

    <violation>
        <name>org/apache/commons/lang3/StringUtils.join:(Ljava/lang/Iterable;Ljava/lang/String;)Ljava/lang/String;</name>
        <version>1.8</version>
        <comment>Prefer java.lang.String.join or use java.util.stream.Stream with java.util.stream.Collectors.joining</comment>
    </violation>

    <violation>
      <name>java/lang/Byte."&lt;init&gt;":(Ljava/lang/String;)V</name>
      <version>1.9</version>
      <comment>Prefer java.lang.Byte.valueOf(String) or java.lang.Byte.parseByte(String)</comment>
    </violation>

    <violation>
      <name>java/lang/Double."&lt;init&gt;":(Ljava/lang/String;)V</name>
      <version>1.9</version>
      <comment>Prefer java.lang.Double.valueOf(String) or java.lang.Double.parseDouble(String)</comment>
    </violation>

    <violation>
      <name>java/lang/Float."&lt;init&gt;":(Ljava/lang/String;)V</name>
      <version>1.9</version>
      <comment>Prefer java.lang.Float.valueOf(String) or java.lang.Float.parseFloat(String)</comment>
    </violation>

    <violation>
      <name>java/lang/Integer."&lt;init&gt;":(Ljava/lang/String;)V</name>
      <version>1.9</version>
      <comment>Prefer java.lang.Integer.valueOf(String) or java.lang.Integer.parseInt(String)</comment>
    </violation>

    <violation>
      <name>java/lang/Long."&lt;init&gt;":(Ljava/lang/String;)V</name>
      <version>1.9</version>
      <comment>Prefer java.lang.Long.valueOf(String) or java.lang.Long.parseLong(String)</comment>
    </violation>

    <violation>
      <name>java/lang/Short."&lt;init&gt;":(Ljava/lang/String;)V</name>
      <version>1.9</version>
      <comment>Prefer java.lang.Short.valueOf(String) or java.lang.Short.parseShort(String)</comment>
    </violation>

    <violation>
        <name>org/apache/commons/codec/binary/Base64.encodeBase64:([B)[B</name>
        <version>1.8</version>
        <comment>Prefer java.util.Base64.Encoder</comment>
    </violation>

    <violation>
        <name>org/apache/commons/codec/binary/Base64.decodeBase64:([B)[B</name>
        <version>1.8</version>
        <comment>Prefer java.util.Base64.Decoder</comment>
    </violation>

</modernizer>
